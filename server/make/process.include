#各平台'SunOS'   'Linux' link类库差异, 设置特定值
ifeq '${OS_NAME}' 'SunOS'
    CLDFLAGS += -lsocket
    CXXLDFLAGS += -lsocket
    DCPPFLAGS += -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT
endif

# 指定支持的源代码扩展名
SFIX :=  .c .C .cpp  .cc .CPP  .c++  .cp  .cxx

#在当当前目录找不到的情况下 到VPATH所指定的目录中去找寻文件
VPATH := ${SRC_DIR}

#########################################################################################
#  六、 得到源文件名称集合、OBJS目标文件名集合
#########################################################################################
#依次循环取得各目录下的所有源文件 在各目录下取源文件时过滤不支持的源文件格式 
#得到源文件集合(带路径)
SOURCES := $(foreach x,${SRC_DIR},$(wildcard $(addprefix ${x}/*,${SFIX})))

#去掉路径信息 去掉扩展名 再追加.o的扩展名 得到目标文件名集合 (不带路径) 需要去掉路径信息 否则连接时有可能找不到.o文件
OBJS := $(addsuffix .o,$(basename $(notdir ${SOURCES})))


#去掉路径信息 去掉扩展名 再追加.d的扩展名 得到依赖文件名集合 (不带路径)
#DEPENDS := $(addsuffix .d,$(basename $(notdir ${SOURCES})))
#去掉扩展名 再追加.d的扩展名 得到依赖文件名集合 (带路径)
DEPENDS := $(addsuffix .d,$(basename ${SOURCES}))

#########################################################################################
#	八、 定义依赖关系  编译、链接规则
#########################################################################################
#.PHONY”表示 clean是个伪目标文件。
.PHONY : all check clean install

#定义编译、链接任务all
all : ${PROGRAM}

#检查源码中 除了C源码外是否有C++源码 ,并定义变量LDCXX存储检查结果
LDCXX := $(strip $(filter-out %.c,${SOURCES}))

#编译器重置
ifdef LDCXX   																#有C++源码时,所有源码都使用g++编译 包括C源码 将CC、CFLAGS 的值设置为对应的${CXX} ${CXXFLAGS}的值
    CC := ${CXX}                    										#重置C编译器为C++编译器
    CFLAGS := ${CXXFLAGS}          											#重置C编译选现为C++编译选现
    CPP := ${CXXPP}                											#重置C预编译器为C++预编译器
    CPPFLAGS := ${CXXPPFLAGS}       										#重置C预编译的选项为C++预编译的选项
endif

#链接
${PROGRAM} : ${DEPENDS} ${OBJS}
ifeq ($(strip $(filter-out %.c,${SOURCES})),)    							#只有C源码时使用gcc连接
	#${CC} ${LIBDIRS} ${CLDFLAGS} ${OBJS} -o $@
	$(CXX) ${LIBDIRS} -Wl,--no-undefined ${OBJS} $(MODULEFLAGS) $@ ${CXXLDFLAGS}
else                                                 						#有C++源码时使用g++连接
    ifdef MODULEFLAGS
	#$(CXX) ${LIBDIRS} ${CXXLDFLAGS} ${OBJS} $(MODULEFLAGS) $@
	#$(CXX) ${LIBDIRS} ${CXXLDFLAGS} -Wl,--no-undefined ${OBJS} $(MODULEFLAGS) $@
	$(CXX) ${LIBDIRS} -Wl,--no-undefined ${OBJS} $(MODULEFLAGS) $@ ${CXXLDFLAGS}
    else
	$(AR) cr $@ $(OBJS)
    endif
endif

# producing the objects (.o)
%.o : %.c
	$(CC)      ${DCPPFLAGS}    ${CXXFLAGS}    ${INCLUDES}   $<
%.o : %.C
	$(CXX)     ${DCPPFLAGS}    ${CXXFLAGS}    ${INCLUDES}   $<
%.o : %.cc
	${CXX}     ${DCPPFLAGS}    ${CXXFLAGS}    ${INCLUDES}   $<
%.o : %.cpp
	${CXX}     ${DCPPFLAGS}    ${CXXFLAGS}    ${INCLUDES}   $<
%.o : %.CPP
	${CXX}     ${DCPPFLAGS}    ${CXXFLAGS}    ${INCLUDES}   $<
%.o : %.c++
	${CXX}     ${DCPPFLAGS}    ${CXXFLAGS}    ${INCLUDES}   $<
%.o : %.cp
	${CXX}     ${DCPPFLAGS}    ${CXXFLAGS}    ${INCLUDES}   $<
%.o : %.cxx
	${CXX}     ${DCPPFLAGS}    ${CXXFLAGS}    ${INCLUDES}   $<

# creating the dependency files (.d)
%.d : %.c
	@${CC}     -M   -MD    ${INCLUDES} $<
%.d : %.C
	@${CXX}    -MM  -MD    ${INCLUDES} $<
%.d : %.cc
	@${CXX}    -MM  -MD    ${INCLUDES} $<
%.d : %.cpp
	@${CXX}    -MM  -MD    ${INCLUDES} $<
%.d : %.CPP
	@${CXX}    -MM  -MD    ${INCLUDES} $<
%.d : %.c++
	@${CXX}    -MM  -MD    ${INCLUDES} $<
%.d : %.cp
	@${CXX}    -MM  -MD    ${INCLUDES} $<
%.d : %.cxx
	@${CXX}    -MM  -MD    ${INCLUDES} $<

#########################################################################################
#  九、 定义其他 check install clean 等任务
#########################################################################################
#定义检查环境相关的变量的任务
check :
	@${ECHO}  MAKEFILES : ${MAKEFILES}
	@${ECHO}  MAKECMDGOALS : ${MAKECMDGOALS}
	@${ECHO}  SHELL : ${SHELL}
	@${ECHO}  OS_NAME : ${OS_NAME}
	@${ECHO}  SRC_DIR : ${SRC_DIR}
	@${ECHO}  SFIX : ${SFIX}
	@${ECHO}  VPATH : ${VPATH}
	@${ECHO}  BIN : ${BIN}
	@${ECHO}  SOURCES : ${SOURCES}
	@${ECHO}  OBJS : ${OBJS}
	@${ECHO}  DEPENDS : ${DEPENDS}
	@${ECHO}  PROGRAM : ${PROGRAM}
	@${ECHO}  CC : ${CC}
	@${ECHO}  CFLAGS : ${CFLAGS}
	@${ECHO}  CPP : ${CPP}
	@${ECHO}  CPPFLAGS : ${CPPFLAGS}
	@${ECHO}  CXX : ${CXX}
	@${ECHO}  CXXFLAGS : ${CXXFLAGS}
	@${ECHO}  CXXPP : ${CXXPP}
	@${ECHO}  CXXPPFLAGS : ${CXXPPFLAGS}
	@${ECHO}  INCLUDES : ${INCLUDES}
	@${ECHO}  LIBDIRS : ${LIBDIRS}
	@${ECHO}  CLDFLAGS : ${CLDFLAGS}
	@${ECHO}  CXXLDFLAGS : ${CXXLDFLAGS}
	@${ECHO}  DCPPFLAGS : ${DCPPFLAGS}
	uname     -a

clean :
	-${RM} ${BIN}/${PROGRAM}
	-${RM} ${BIN}/*.o
	-${RM} ${BIN}/*.d
	-${RM} *.o
	-${RM} *.d

install :
	-${CP} ${PROGRAM} ${BIN}
#ifdef MODULEFLAGS
#	-${MV} ${PROGRAM} ${BIN}
#else
#	-mkdir -p ${LIB}
#	-${MV} ${PROGRAM} ${BIN}
#endif
#	-mkdir -p ${BIN}/$(OUTDIR)/$(OUTTARGET)
#	-${MV}  *.o ${BIN}/            ##$(OUTDIR)/$(OUTTARGET)
#	-${MV}  *.d ${BIN}/            ##$(OUTDIR)/$(OUTTARGET)
